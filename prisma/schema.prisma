generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Base User model
model User {
  id          String  @id @default(uuid())
  email       String  @unique
  password    String
  name        String
  role        Role
  phoneNumber String?

  // Relations based on type
  admin     Admin?
  assistant Assistant?
  parent    Parent?
  children  Child[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Admin model extending User
model Admin {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

// Assistant model extending User
model Assistant {
  id   String @id
  user User   @relation(fields: [id], references: [id])
}

// Parent model extending User
model Parent {
  id           String       @id
  relationship Relationship
  user         User         @relation(fields: [id], references: [id])
  children     Child[] // Changed to many-to-many
}

model Child {
  id               String   @id @default(uuid())
  name             String
  dob              DateTime
  healthInfo       String?
  allergies        String?
  medications      String?
  emergencyContact String?

  // Change to many-to-many relationship
  parents    Parent[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  User       User?        @relation(fields: [userId], references: [id])
  userId     String?
  attendance Attendance[]
}

enum Role {
  ADMIN
  ASSISTANT
  PARENT
}

enum Relationship {
  MOTHER
  FATHER
  GUARDIAN
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  HOLIDAY
}

model Attendance {
  id           String           @id @default(cuid())
  childId      String
  date         DateTime
  status       AttendanceStatus @default(PRESENT)
  checkIn      DateTime?
  checkOut     DateTime?
  notes        String?
  child        Child            @relation(fields: [childId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  meals        Meal[]
  naps         Nap[]
  nappyChanges NappyChange[]

  @@unique([childId, date])
}

model Meal {
  id           String       @id @default(cuid())
  attendanceId String
  attendance   Attendance   @relation(fields: [attendanceId], references: [id])
  type         MealType
  food         String
  quantity     FoodQuantity
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Nap {
  id           String     @id @default(cuid())
  attendanceId String
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  startTime    DateTime
  finishTime   DateTime
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model NappyChange {
  id           String     @id @default(cuid())
  attendanceId String
  attendance   Attendance @relation(fields: [attendanceId], references: [id])
  time         DateTime
  notes        String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

enum MealType {
  SNACKS
  LUNCH
  TEA
}

enum FoodQuantity {
  GOOD
  AVERAGE
  BELOW_AVERAGE
}
